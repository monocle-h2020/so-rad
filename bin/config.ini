[DEFAULT]
# if the platform has a fixed bearing enable / enter it here
use_fixed_bearing = False
fixed_bearing_deg = 148
# how often to check system readiness (and adjust viewing angles) for a measurement (lower this to ready system for measurement faster, but at higher power consumption)
# this is not the sampling interval, which is set in the RADIOMETERS section. A typical cycle of reading all peripherals takes < 2 s. 5 seconds is recommended unless the platforms turns abrubtly, in which case 2-4 seconds is more appropriate. 
main_check_cycle_sec = 5

[SAMPLING]
# minimum speed in knots to allow sampling (on static platforms set to 0.0)
sampling_speed_limit = 0.0
# minimum solar elevation in degrees to allow sampling
solar_elevation_limit = 30.0

[DATABASE]
# note that you can rename an existing database file and/or move it away at any time to generate a new database. May require a restart of the So-rad software. 
use_database = True
database_type = sqlite3
database_path = /home/pi/sorad-data/sorad_database.db

[CAMERA]
use_camera = False
protocol = Soradcam
camera_ip = PML-SRCAM-001.lan
camera_port = 80
resolution = full
#the interval determines the minimum interval in seconds between full resolution image acquisition. They are only triggered alongside Lt measurements.
interval = 100
storage_path = /home/pi/sorad-camera

[GPS]
# protocol will determine which GPS you will be using. Currently 'rtk' and 'nmea0183' and 'pyubx2' are supported
# rtk refers to the UBLOX FP9 chipset implemented on the simplertk board with dual receivers for accurate heading information, which is highly recommended for moving installation. 
protocol = rtk
baud1 = 9600
# position of receivers on ship, needed to establish whether ship is moving forward or backward! It is assumed that the antennae align in parallel with the bow-stern axis of the ship. 
# if you find the heading is 180deg reversed, flip these around (there is no need to move the antennae around)
location1 = front
location2 = rear
# alternative positioning is port - starboard, in which case we should correct the heading by the following (positive, i.e. this will be subtracted) angle:
gps_heading_correction = 0
# usb hub identifier defaults
id1 = id1
# Lower_Limit of speed in knots to allow gps heading from single gps. 
gps_heading_speed_limit = 1.0
# Upper limit of heading accuracy derived from RTK gps to allow heading to be used
gps_heading_accuracy_limit = 5.0
# port settings
port_autodetect = True
port_autodetect_string = u-blox GNSS receiver
port1_default = /dev/ttyUSB1

[MOTOR]
use_motor = true
#steps in one full rotation. Only configure this when programming the stepper motor. 
# how many steps does motor take per 1 degree rotation? Decimal notation allowed.
#sorad-01: steps_per_degree = 100
steps_per_degree = 27.77778
# set rotation limits from home position (i.e. to avoid looking back at platform) Configure this for each deployment platform. 
cw_limit_deg = 150
ccw_limit_deg = -160
# the mode of adjusting the motor angle to the sun is either 'always' or 'sampling'. The default if 'sampling' which only turns the motor if sampling conditions can be met. 'always' moves the motor whenever the thresholds below are met.
adjust_mode = sampling
# Minimum adjustment step interval (e.g. to save power). Note this is in steps not degrees (see steps_per_degree to convert). For example with threshold = 500 and steps_per_degree=100, no rotation of the motor < 5 degrees will be executed. 
step_thresh_angle = 100
# Minimum adjustment time interval in seconds (float allowed)
step_thresh_time = 10
# home_position of motor compared to ship bow-stern axis, in degrees (motor housing can also be turned on installation to keep this zero). It is advisable to align the home position of the motor with the bow-stern axis to keep things simple. 
# 10=specific to SoRad-1. Ideally this is 0. Note that this does not influence the 'go-home' routine on startup at this moment.
home_pos = 0
port_autodetect = True
port_autodetect_string = USB-RS485 Cable
port_default = /dev/ttyUSB3
baud = 115200

[BATTERY]
use_battery = false
# battery_protocol: support for victron MPPT controllers is implemented
# for other protocols you should extend battery_manager.py, or set use_battery to false
battery_protocol = victron
port_autodetect = true
port_autodetect_string = TTL232R
port_default = /dev/ttyUSB4
baud = 19200
# low / critical battery voltage below which motor and sensors are stopped (GPIO control if available), respectively.
# these settings will be battery specific and should be above the voltage at which the solar charge controller will disconnect load
battery_low_th_V = 12.1
battery_crit_th_V = 11.6

[POWER_SCHEDULE]
use_power_schedule = False
use_gpio_control = False
gpio_protocol = rpi
# default (where implemented) is 22 = board pin 15
power_schedule_gpio1 = 22
# implemented schedule option(s):
# 'solar_angle' : when solar angle is below sampling limit also switch off power to modem
schedule_mode = solar_angle

[TPR]
use_tpr = true
# tilt/pitch/roll protocol: support for Adafruit board for ADXL345 is implemented as 'ada_adxl345'
# for other protocols you should extend tpr_manager.py
protocol = ada_adxl345
# indicate in which order the x,y,z accelerometer axes are reported (because the sensor may be mounted in arbitrary orientation). Default is y=2,z=0,x=1
yindex = 2
zindex = 0
xindex = 1
# In addition to live accelerometer readings you can take the average and stdev over the following interval in seconds to give an indication of wave action
# On small vessels set this close to the measurement integration time (in the order of 1 s max) so it will represent the variability during each Rrs measurement
# On larger vessels the relation between indidual waves and the optical geometry is lost, so use a longer interval to estimate the extent of heaving during a whole measurement repeat cycle (10-15s):
sampling_time = 5.0

[RHT]
# relative humidity and temperature sensor
use_rht = true
# protocol: support for Adafruit DHT22 board implemented as 'ada_dht22' (<2024) or 'ada_cp_dht' (>2024)
# for other protocols you should extend rht_manager.py
protocol = ada_dht22
pin = 14
sampling_time = 5

[RADIOMETERS]
# curently only 'pytrios' and 'pytrios_g2' are supported as rad_interface
rad_interface = pytrios
# No longer used: pytrios_path = /home/pi/Desktop/PyTrios
# up to three sensors supported, set to 0 to ignore radiometers completely
n_sensors = 3
# sampling interval in seconds
sampling_interval = 30
# set optional day/night independent sampling interval (sec) for Ed sensor
ed_sampling = True
ed_sampling_interval = 300
ed_sensor_id = see_local_config
ed_sampling_min_solar_elevation_deg = 0
# PYTRIOS specific settings: how much logging output per sensor channel and com port
verbosity_chn = 3
verbosity_com = 3
# 0 = auto integration time
integration_time = 0
# GPIO control settings
# gpio2 & gpio3 will be deprecated (all sensors switched on/off simultaneously using gpio1)
# NOTE: we don't use the pin numbering on the board but on the chip. To cross-reference use the 'pinout' command on the Pi command line. 
use_gpio_control = True
# use 'rpi', the newer gpiozero is not yet working properly. 
gpio_protocol = rpi
# default is 27 = board pin 13
gpio1 = 27
# allow reboot of radiometers (TriOS sensors have a tendency to get stuck on occasion)
allow_consecutive_timeouts = 2
minimum_reboot_interval_sec = 300
# PORT settings
port_autodetect = True
port_autodetect_string = USB-RS232 Cable
# defaults in case autodetect is not used or unsuccessful
port1 = USB3
port2 = USB4
port3 = USB5

[LOGGING]
# Log level for when you are logging stuffs
# Console log level controls what messages are outputted to the terminal.
# The other logging levels are what messages are outputted to the log files if set.
# The levels can be the following one of the following: CRITICAL CRIT ERROR WARNING WARN INFO DEBUG
# If not the default level is INFO
log_file_location = /home/pi/sorad-logs/log.txt
console_log_level = INFO
# TODO: only using root logger at the moment
gps_log_level = INFO
rad_log_level = INFO
bat_log_level = INFO

[EXPORT]
# Authentication keys, URLs and metadata needed to send data to remote storage. You should not change these values here, but add them to a local-config.ini file in this folder
use_export = true
# only Parse platform is currently supported
export_protocol = parse_platform
platform_id = set_in_local-config
# Generate the uuid once per platform (open python, import uuid, uuid.uuid1(), copy and paste in local-config.ini)
platform_uuid = set_in_local-config
parse_url = set_in_local-config
parse_app_id = set_in_local-config
parse_clientkey = set_in_local-config
operator_contact = set_in_local-config
owner_contact = set_in_local-config
# note that US spelling of license is used below
license = set in local-config
license_reference = set in local-config

[FLASK]
# random characters, just for server to server encryption, anything goes
key1 = set in local-config
# non-reversible pw hash for admin user to adjust system settings through web interface
admin_hash = set in local-config
