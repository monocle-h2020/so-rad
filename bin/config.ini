[DEFAULT]
# Timezone
# FIXME: shouldn't everything be in UTC? Check/Discuss where time zone is used/needed
time_zone_offset = 0
use_gpio_control = True
# if the platform has a fixed bearing enable / enter it here
use_fixed_bearing = True
fixed_bearing_deg = 148
main_check_cycle_sec = 5

[SAMPLING]
# minimum speed in knots to allow sampling (on static platforms set to 0.0) NOT IMPLEMENTED
sampling_speed_limit = 1.0
# minimum solar elevation in degrees to allow sampling
solar_elevation_limit = 30.0

[DATABASE]
use_database = True
database_type = sqlite3
database_file = sorad_database.db

[GPS]
n_gps = 2
# baud rate
baud1 = 115200
baud2 = 115200
# Hz
set_polling_rate = True
polling_rate1 = 10
polling_rate2 = 10
# position on ship, needed to establish whether ship is moving forward or backward!
location1 = front
location2 = rear
# usb hub identifier
id1 = id1
id2 = id2
# Lower_Limit of speed in knots to allow gps heading from single gps NOT USED
gps_heading_speed_limit = 1.0
port_autodetect = True
port_autodetect_string = CP2102 USB to UART Bridge Controller
port1_default = /dev/ttyUSB1
port2_default = /dev/ttyUSB2
# GPIO control settings
use_gpio_control = True
gpio2 = 12

[MOTOR]
use_motor = true
#steps in one full rotation
step_limit = 36000
steps_per_degree = 100
cw_limit_deg = 150
ccw_limit_deg = -10
# Minimum adjustment step interval (to save power)
step_thresh_angle = 500
# seconds?   NOT USED?
step_thresh_time = 10
# home_position of motor compared to ship bow-stern axis, in degrees (motor housing can also be turned on installation to keep this zero)
home_pos = 10
port_autodetect = True
port_autodetect_string = USB-RS485 Cable
port_default = /dev/ttyUSB3
baud = 115200

[BATTERY]
use_battery = true
# battery_protocol: support for victron MPPT controllers is implemented
# for other protocols you should extend battery_manager.py, or set check_battery to false
battery_protocol = victron
port_autodetect = true
port_autodetect_string = TTL232R
port_default = /dev/ttyUSB4
baud = 19200
# low / critical battery voltage below which motor and sensors are stopped (GPIO control if available), respectively.
# these settings will be battery specific and should be above the voltage at which the solar charge controller will disconnect load
battery_low_th_V = 12.00
battery_crit_th_V = 11.45

[RADIOMETERS]
# curently only pytrios is supported
rad_interface = pytrios
pytrios_path = /home/pi/Desktop/PyTrios
# up to three sensors supported
n_sensors = 3
# sampling interval in seconds
sampling_interval = 15
# set optional day/night independent sampling interval (sec) for Ed sensor
ed_sampling = True
ed_sampling_interval = 300
ed_sensor_id = 85EF

# PYTRIOS specific settings
verbosity_chn = 3
verbosity_com = 3
# 0 = auto integration time
integration_time = 0

# GPIO control settings
use_gpio_control = True
gpio1 = 11
gpio2 = 13
gpio3 = 15

allow_consecutive_timeouts = 2
minimum_reboot_interval_sec = 300

# PORT settings
port_autodetect = True
port_autodetect_string = USB-RS232 Cable
# defaults in case autodetect is not used or unsuccessful
port1 = USB3
port2 = USB4
port3 = USB5


[LOGGING]
# Log level for when you are logging stuffs
# Console log level controls what messages are outputted to the terminal.
# The other logging levels are what messages are outputted to the log files if set.

# The levels can be the following one of the following: CRITICAL CRIT ERROR WARNING WARN INFO DEBUG
# If not the default level is INFO
log_file_location = /home/pi/Desktop/sorad-logs/log.txt
console_log_level = INFO
gps_log_level = INFO
sas_log_level = INFO
app_log_level = INFO
